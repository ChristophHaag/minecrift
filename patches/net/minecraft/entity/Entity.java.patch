--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -1,19 +1,25 @@
 package net.minecraft.entity;
 
-import java.util.List;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
+
+import com.mtbs3d.minecrift.settings.VRSettings;
+import com.mtbs3d.minecrift.api.IBodyAimController;
+import com.mtbs3d.minecrift.gameplay.VRPlayer;
+import com.mtbs3d.minecrift.provider.MCOpenVR;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.enchantment.EnchantmentProtection;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
+import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
@@ -21,16 +27,8 @@
 import net.minecraft.nbt.NBTTagFloat;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.ChunkCoordinates;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.Direction;
-import net.minecraft.util.IChatComponent;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.StatCollector;
-import net.minecraft.util.Vec3;
+import net.minecraft.src.Reflector;
+import net.minecraft.util.*;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
@@ -175,7 +173,7 @@
      * The amount of ticks you have to stand inside of fire before be set on fire
      */
     public int fireResistance;
-    private int fire;
+    protected int fire;
 
     /**
      * Whether this entity is currently inside of water (if it handles water movement that is)
@@ -220,7 +218,34 @@
     protected UUID entityUniqueID;
     public Entity.EnumEntitySize myEntitySize;
     private static final String __OBFID = "CL_00001533";
-
+	/** MINECRIFT FORGE **/
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public ArrayList<EntityItem> capturedDrops = new ArrayList<EntityItem>();
+    private UUID persistentID;
+
+    //protected HashMap<String, IExtendedEntityProperties> extendedProperties;
+    /*
+    * NOTE: we define the extendedProperties HashMap here to take <String, Object> types.
+    *  I don't know of a way to modify these types via reflection, but we need to take
+    *  <String, net.minecraftforge.common.IExtendedEntityProperties> objects as params here.
+    *  This is performed via ASM on class load in MinecriftClassTransformer$EntityTransform.
+        * ANY CHANGES TO THIS FIELD MUST ALSO BE MADE IN
+    * com.mtbs.minecrift.tweaker.MinecriftClassTransformer$EntityTransform via ASMifier!!
+    */
+    protected HashMap<String, Object> extendedProperties;
+	/** END MINECRIFT FORGE **/
+    
+    /** MINECRIFT **/
+    public float headPitch = 0;
+    public double additionX = 0;
+    public double additionZ = 0;
+    public double additionY = 0;
+    public final float PIOVER180 = (float)Math.PI / 180.0F;
+    public Vec3 directionVec = Vec3.createVectorHelper(0, 0, 0);
+    /** END MINECRIFT **/
+    
     public int getEntityId()
     {
         return this.entityId;
@@ -257,7 +282,41 @@
         this.dataWatcher.addObject(0, Byte.valueOf((byte)0));
         this.dataWatcher.addObject(1, Short.valueOf((short)300));
         this.entityInit();
+	/** MINECRIFT FORGE **/
+		if (Reflector.forgeExists())
+		{
+            initExtendedProperties();
+		}
+    }
+
+    private void initExtendedProperties()
+    {
+//    extendedProperties = new HashMap<String, IExtendedEntityProperties>();
+//
+//    MinecraftForge.EVENT_BUS.post(new EntityEvent.EntityConstructing(this));
+//
+//    for (IExtendedEntityProperties props : this.extendedProperties.values())
+//    {
+//        props.init(this, worldIn);
+//    }
+   /*
+    * NOTE: we define the extendedProperties HashMap here to take <String, Object> types.
+    *  I don't know of a way to modify these types via reflection, but we need to take
+    *  <String, net.minecraftforge.common.IExtendedEntityProperties> objects as params here.
+    *  This is performed via ASM on class load in MinecriftClassTransformer$EntityTransform.
+    * ANY CHANGES TO THIS METHOD MUST ALSO BE MADE IN
+    * com.mtbs.minecrift.tweaker.MinecriftClassTransformer$EntityTransform via ASMifier!!
+    */
+        extendedProperties = new HashMap<String, Object>();
+
+        Reflector.postForgeBusEvent(Reflector.ForgeEntityEvent_EntityConstructing_Constructor, new Object[] {this});
+
+        for (Object props : this.extendedProperties.values())
+        {
+            Reflector.callVoid(props, Reflector.ForgeIExtendedEntityProperties_init, new Object[] {this, this.worldObj});
+        }
     }
+    /** END MINECRIFT FORGE **/
 
     protected abstract void entityInit();
 
@@ -610,11 +669,11 @@
     /**
      * Tries to moves the entity by the passed in displacement. Args: x, y, z
      */
-    public void moveEntity(double x, double y, double z)
+    public void moveEntity(double dx, double dy, double dz)
     {
         if (this.noClip)
         {
-            this.boundingBox.offset(x, y, z);
+            this.boundingBox.offset(dx, dy, dz);
             this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
             this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.yOffset2;
             this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
@@ -630,218 +689,219 @@
             if (this.isInWeb)
             {
                 this.isInWeb = false;
-                x *= 0.25D;
-                y *= 0.05000000074505806D;
-                z *= 0.25D;
+                dx *= 0.25D;
+                dy *= 0.05000000074505806D;
+                dz *= 0.25D;
                 this.motionX = 0.0D;
                 this.motionY = 0.0D;
                 this.motionZ = 0.0D;
             }
 
-            double var13 = x;
-            double var15 = y;
-            double var17 = z;
-            AxisAlignedBB var19 = this.boundingBox.copy();
-            boolean var20 = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
+            double reqDisplacementX = dx;
+            double reqYDisplacement = dy;
+            double reqDisplacementZ = dz;
+            AxisAlignedBB bbCopy = this.boundingBox.copy();
+            boolean sneakingPlayer = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
 
-            if (var20)
+            if (sneakingPlayer)
             {
                 double var21;
 
-                for (var21 = 0.05D; x != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(x, -1.0D, 0.0D)).isEmpty(); var13 = x)
+                for (var21 = 0.05D; dx != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(dx, -1.0D, 0.0D)).isEmpty(); reqDisplacementX = dx)
                 {
-                    if (x < var21 && x >= -var21)
+                    if (dx < var21 && dx >= -var21)
                     {
-                        x = 0.0D;
+                        dx = 0.0D;
                     }
-                    else if (x > 0.0D)
+                    else if (dx > 0.0D)
                     {
-                        x -= var21;
+                        dx -= var21;
                     }
                     else
                     {
-                        x += var21;
+                        dx += var21;
                     }
                 }
 
-                for (; z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, z)).isEmpty(); var17 = z)
+                for (; dz != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, dz)).isEmpty(); reqDisplacementZ = dz)
                 {
-                    if (z < var21 && z >= -var21)
+                    if (dz < var21 && dz >= -var21)
                     {
-                        z = 0.0D;
+                        dz = 0.0D;
                     }
-                    else if (z > 0.0D)
+                    else if (dz > 0.0D)
                     {
-                        z -= var21;
+                        dz -= var21;
                     }
                     else
                     {
-                        z += var21;
+                        dz += var21;
                     }
                 }
 
-                while (x != 0.0D && z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(x, -1.0D, z)).isEmpty())
+                while (dx != 0.0D && dz != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(dx, -1.0D, dz)).isEmpty())
                 {
-                    if (x < var21 && x >= -var21)
+                    if (dx < var21 && dx >= -var21)
                     {
-                        x = 0.0D;
+                        dx = 0.0D;
                     }
-                    else if (x > 0.0D)
+                    else if (dx > 0.0D)
                     {
-                        x -= var21;
+                        dx -= var21;
                     }
                     else
                     {
-                        x += var21;
+                        dx += var21;
                     }
 
-                    if (z < var21 && z >= -var21)
+                    if (dz < var21 && dz >= -var21)
                     {
-                        z = 0.0D;
+                        dz = 0.0D;
                     }
-                    else if (z > 0.0D)
+                    else if (dz > 0.0D)
                     {
-                        z -= var21;
+                        dz -= var21;
                     }
                     else
                     {
-                        z += var21;
+                        dz += var21;
                     }
 
-                    var13 = x;
-                    var17 = z;
+                    reqDisplacementX = dx;
+                    reqDisplacementZ = dz;
                 }
             }
 
-            List var36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(x, y, z));
+            List var36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(dx, dy, dz));
 
             for (int var22 = 0; var22 < var36.size(); ++var22)
             {
-                y = ((AxisAlignedBB)var36.get(var22)).calculateYOffset(this.boundingBox, y);
+                dy = ((AxisAlignedBB)var36.get(var22)).calculateYOffset(this.boundingBox, dy);
             }
 
-            this.boundingBox.offset(0.0D, y, 0.0D);
+            this.boundingBox.offset(0.0D, dy, 0.0D);
 
-            if (!this.field_70135_K && var15 != y)
+            if (!this.field_70135_K && reqYDisplacement != dy)
             {
-                z = 0.0D;
-                y = 0.0D;
-                x = 0.0D;
+                dz = 0.0D;
+                dy = 0.0D;
+                dx = 0.0D;
             }
 
-            boolean var37 = this.onGround || var15 != y && var15 < 0.0D;
+            boolean var37 = this.onGround || reqYDisplacement != dy && reqYDisplacement < 0.0D;
             int var23;
 
             for (var23 = 0; var23 < var36.size(); ++var23)
             {
-                x = ((AxisAlignedBB)var36.get(var23)).calculateXOffset(this.boundingBox, x);
+                dx = ((AxisAlignedBB)var36.get(var23)).calculateXOffset(this.boundingBox, dx);
             }
 
-            this.boundingBox.offset(x, 0.0D, 0.0D);
+             this.boundingBox.offset(dx, 0.0D, 0.0D);
 
-            if (!this.field_70135_K && var13 != x)
+            if (!this.field_70135_K && reqDisplacementX != dx)
             {
-                z = 0.0D;
-                y = 0.0D;
-                x = 0.0D;
+                dz = 0.0D;
+                dy = 0.0D;
+                dx = 0.0D;
             }
 
             for (var23 = 0; var23 < var36.size(); ++var23)
             {
-                z = ((AxisAlignedBB)var36.get(var23)).calculateZOffset(this.boundingBox, z);
+                dz = ((AxisAlignedBB)var36.get(var23)).calculateZOffset(this.boundingBox, dz);
             }
 
-            this.boundingBox.offset(0.0D, 0.0D, z);
+            this.boundingBox.offset(0.0D, 0.0D, dz);
 
-            if (!this.field_70135_K && var17 != z)
+            if (!this.field_70135_K && reqDisplacementZ != dz)
             {
-                z = 0.0D;
-                y = 0.0D;
-                x = 0.0D;
+                dz = 0.0D;
+                dy = 0.0D;
+                dx = 0.0D;
             }
 
             double var25;
             double var27;
             int var30;
             double var38;
-
-            if (this.stepHeight > 0.0F && var37 && (var20 || this.yOffset2 < 0.05F) && (var13 != x || var17 != z))
-            {
-                var38 = x;
-                var25 = y;
-                var27 = z;
-                x = var13;
-                y = (double)this.stepHeight;
-                z = var17;
+            
+//jrbudda: would like to use this for 'walk up blocks' in roomscale but dx and dz are always 0 since we set posX and posZ directly (unless active freemoveing) .
+            if ( this.stepHeight > 0.0F && var37 && (sneakingPlayer || this.yOffset2 < 0.05F) && (reqDisplacementX != dx || reqDisplacementZ != dz))
+            { // Step up?
+                var38 = dx;
+                var25 = dy;
+                var27 = dz;
+                dx = reqDisplacementX;
+                dy = (double)this.stepHeight;
+                dz = reqDisplacementZ;
                 AxisAlignedBB var29 = this.boundingBox.copy();
-                this.boundingBox.setBB(var19);
-                var36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var13, y, var17));
+                this.boundingBox.setBB(bbCopy);
+                var36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(reqDisplacementX, dy, reqDisplacementZ));
 
                 for (var30 = 0; var30 < var36.size(); ++var30)
                 {
-                    y = ((AxisAlignedBB)var36.get(var30)).calculateYOffset(this.boundingBox, y);
+                    dy = ((AxisAlignedBB)var36.get(var30)).calculateYOffset(this.boundingBox, dy);
                 }
 
-                this.boundingBox.offset(0.0D, y, 0.0D);
+                this.boundingBox.offset(0.0D, dy, 0.0D);
 
-                if (!this.field_70135_K && var15 != y)
+                if (!this.field_70135_K && reqYDisplacement != dy)
                 {
-                    z = 0.0D;
-                    y = 0.0D;
-                    x = 0.0D;
+                    dz = 0.0D;
+                    dy = 0.0D;
+                    dx = 0.0D;
                 }
 
                 for (var30 = 0; var30 < var36.size(); ++var30)
                 {
-                    x = ((AxisAlignedBB)var36.get(var30)).calculateXOffset(this.boundingBox, x);
+                    dx = ((AxisAlignedBB)var36.get(var30)).calculateXOffset(this.boundingBox, dx);
                 }
 
-                this.boundingBox.offset(x, 0.0D, 0.0D);
+                this.boundingBox.offset(dx, 0.0D, 0.0D);
 
-                if (!this.field_70135_K && var13 != x)
+                if (!this.field_70135_K && reqDisplacementX != dx)
                 {
-                    z = 0.0D;
-                    y = 0.0D;
-                    x = 0.0D;
+                    dz = 0.0D;
+                    dy = 0.0D;
+                    dx = 0.0D;
                 }
 
                 for (var30 = 0; var30 < var36.size(); ++var30)
                 {
-                    z = ((AxisAlignedBB)var36.get(var30)).calculateZOffset(this.boundingBox, z);
+                    dz = ((AxisAlignedBB)var36.get(var30)).calculateZOffset(this.boundingBox, dz);
                 }
 
-                this.boundingBox.offset(0.0D, 0.0D, z);
+                this.boundingBox.offset(0.0D, 0.0D, dz);
 
-                if (!this.field_70135_K && var17 != z)
+                if (!this.field_70135_K && reqDisplacementZ != dz)
                 {
-                    z = 0.0D;
-                    y = 0.0D;
-                    x = 0.0D;
+                    dz = 0.0D;
+                    dy = 0.0D;
+                    dx = 0.0D;
                 }
 
-                if (!this.field_70135_K && var15 != y)
+                if (!this.field_70135_K && reqYDisplacement != dy)
                 {
-                    z = 0.0D;
-                    y = 0.0D;
-                    x = 0.0D;
+                    dz = 0.0D;
+                    dy = 0.0D;
+                    dx = 0.0D;
                 }
                 else
                 {
-                    y = (double)(-this.stepHeight);
+                    dy = (double)(-this.stepHeight);
 
                     for (var30 = 0; var30 < var36.size(); ++var30)
                     {
-                        y = ((AxisAlignedBB)var36.get(var30)).calculateYOffset(this.boundingBox, y);
+                        dy = ((AxisAlignedBB)var36.get(var30)).calculateYOffset(this.boundingBox, dy);
                     }
 
-                    this.boundingBox.offset(0.0D, y, 0.0D);
+                    this.boundingBox.offset(0.0D, dy, 0.0D);
                 }
 
-                if (var38 * var38 + var27 * var27 >= x * x + z * z)
+                if (var38 * var38 + var27 * var27 >= dx * dx + dz * dz)
                 {
-                    x = var38;
-                    y = var25;
-                    z = var27;
+                    dx = var38;
+                    dy = var25;
+                    dz = var27;
                     this.boundingBox.setBB(var29);
                 }
             }
@@ -851,23 +911,27 @@
             this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
             this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.yOffset2;
             this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
-            this.isCollidedHorizontally = var13 != x || var17 != z;
-            this.isCollidedVertically = var15 != y;
-            this.onGround = var15 != y && var15 < 0.0D;
+            this.isCollidedHorizontally = reqDisplacementX != dx || reqDisplacementZ != dz;
+            this.isCollidedVertically = reqYDisplacement != dy;
+            this.onGround = reqYDisplacement != dy && reqYDisplacement < 0.0D;
             this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
-            this.updateFallState(y, this.onGround);
+            this.updateFallState(dy, this.onGround);
 
-            if (var13 != x)
+            if(!this.onGround && this instanceof EntityPlayer) { 
+            	int a= 9;
+            }
+            
+            if (reqDisplacementX != dx)
             {
                 this.motionX = 0.0D;
             }
 
-            if (var15 != y)
+            if (reqYDisplacement != dy)
             {
                 this.motionY = 0.0D;
             }
 
-            if (var17 != z)
+            if (reqDisplacementZ != dz)
             {
                 this.motionZ = 0.0D;
             }
@@ -876,7 +940,7 @@
             var25 = this.posY - var9;
             var27 = this.posZ - var11;
 
-            if (this.canTriggerWalking() && !var20 && this.ridingEntity == null)
+            if (this.canTriggerWalking() && !sneakingPlayer && this.ridingEntity == null)
             {
                 int var39 = MathHelper.floor_double(this.posX);
                 var30 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
@@ -1171,9 +1235,38 @@
 
         if (var7.getMaterial() == materialIn)
         {
-            float var8 = BlockLiquid.getLiquidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 0.11111111F;
-            float var9 = (float)(var5 + 1) - var8;
-            return var2 < (double)var9;
+			/** MINECRIFT FORGE **/
+			if (Reflector.forgeExists())
+			{
+	            double filled = 1.0f; //If it's not a liquid assume it's a solid block
+
+//	            if (var7 instanceof IFluidBlock)
+//	            {
+//	                filled = ((IFluidBlock)var7).getFilledPercentage(worldObj, var4, var5, var6);
+//	            }
+                if (Reflector.isInstanceOf(Reflector.ForgeIFluidBlock, var7))
+                {
+                    filled = Reflector.callFloat(var7, Reflector.ForgeIFluidBlock_getFilledPercentage, new Object[]{worldObj, var4, var5, var6});
+                }
+
+	            if (filled < 0)
+	            {
+	                filled *= -1;
+	                //filled -= 0.11111111F; //Why this is needed.. not sure...
+	                return var2 > (double)(var5 + (1 - filled));
+	            }
+	            else
+	            {
+	                return var2 < (double)(var5 + filled);
+	            }			
+			}
+			else
+			{
+	            float var8 = BlockLiquid.getLiquidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 0.11111111F;
+	            float var9 = (float)(var5 + 1) - var8;
+	            return var2 < (double)var9;
+			}
+			/** END MINECRIFT FORGE **/
         }
         else
         {
@@ -1193,30 +1286,36 @@
     {
         return this.worldObj.isMaterialInBB(this.boundingBox.expand(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.lava);
     }
-
+    
+/** MINECRIFT **/
+    public void moveFlying(float strafe, float forward, float friction)
+    {
+        moveFlying(strafe, forward, friction, false);
+    }
+    
     /**
      * Used in both water and by flying objects
      */
-    public void moveFlying(float strafe, float forward, float friction)
+    public void moveFlying(float strafe, float forward, float friction, boolean allowYAdjust)
     {
-        float var4 = strafe * strafe + forward * forward;
+        float f3 = strafe * strafe + forward * forward;
 
-        if (var4 >= 1.0E-4F)
+        if (f3 >= 1.0E-4F)
         {
-            var4 = MathHelper.sqrt_float(var4);
+            f3 = MathHelper.sqrt_float(f3);
 
-            if (var4 < 1.0F)
+            if (f3 < 1.0F)
             {
-                var4 = 1.0F;
+                f3 = 1.0F;
             }
 
-            var4 = friction / var4;
-            strafe *= var4;
-            forward *= var4;
-            float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
-            float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
-            this.motionX += (double)(strafe * var6 - forward * var5);
-            this.motionZ += (double)(forward * var6 + strafe * var5);
+            f3 = friction / f3;
+            strafe *= f3;
+            forward *= f3;
+            float f4 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
+            float f5 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
+            this.motionX += (double)(strafe * f5 - forward * f4);
+            this.motionZ += (double)(forward * f5 + strafe * f4);
         }
     }
 
@@ -1526,6 +1625,31 @@
             tagCompund.setInteger("PortalCooldown", this.timeUntilPortal);
             tagCompund.setLong("UUIDMost", this.getUniqueID().getMostSignificantBits());
             tagCompund.setLong("UUIDLeast", this.getUniqueID().getLeastSignificantBits());
+			/** MINECRIFT FORGE **/
+			if (Reflector.forgeExists())
+			{
+	            if (customEntityData != null)
+	            {
+	                tagCompund.setTag("ForgeData", customEntityData);
+	            }
+
+	           for (String identifier : this.extendedProperties.keySet())
+	           {
+	                try
+	                {
+//	                    IExtendedEntityProperties props = this.extendedProperties.get(identifier);
+//	                    props.saveNBTData(tagCompund);
+                        Reflector.callVoid(this.extendedProperties.get(identifier), Reflector.ForgeIExtendedEntityProperties_saveNBTData, new Object[] {tagCompund});
+	                }
+	                catch (Throwable t)
+	                {
+                        //FMLLog.severe("Failed to save extended properties for %s.  This is a mod issue.", identifier);
+	                    Reflector.callVoid(Reflector.FMLLog_severe, new Object[] {"Failed to save extended properties for %s.  This is a mod issue.", identifier});
+	                    t.printStackTrace();
+	                }
+	            }
+			}
+			/** END MINECRIFT FORGE **/
             this.writeEntityToNBT(tagCompund);
 
             if (this.ridingEntity != null)
@@ -1596,6 +1720,37 @@
 
             this.setPosition(this.posX, this.posY, this.posZ);
             this.setRotation(this.rotationYaw, this.rotationPitch);
+			/** MINECRIFT FORGE **/
+			if (Reflector.forgeExists())
+			{
+	            if (tagCompund.hasKey("ForgeData"))
+	            {
+	                customEntityData = tagCompund.getCompoundTag("ForgeData");
+	            }
+
+	            for (String identifier : this.extendedProperties.keySet())
+	            {
+	                try
+	                {
+//	                    IExtendedEntityProperties props = this.extendedProperties.get(identifier);
+//	                    props.loadNBTData(tagCompund);
+                        Reflector.callVoid(this.extendedProperties.get(identifier), Reflector.ForgeIExtendedEntityProperties_loadNBTData, new Object[] {tagCompund});
+	                }
+	                catch (Throwable t)
+	                {
+	                    //FMLLog.severe("Failed to load extended properties for %s.  This is a mod issue.", identifier);
+                        Reflector.callVoid(Reflector.FMLLog_severe, new Object[] {"Failed to load extended properties for %s.  This is a mod issue.", identifier});
+	                    t.printStackTrace();
+	                }
+	            }
+
+	            //Rawr, legacy code, Vanilla added a UUID, keep this so older maps will convert properly
+	            if (tagCompund.hasKey("PersistentIDMSB") && tagCompund.hasKey("PersistentIDLSB"))
+	            {
+	                this.entityUniqueID = new UUID(tagCompund.getLong("PersistentIDMSB"), tagCompund.getLong("PersistentIDLSB"));
+	            }
+			}
+			/** END MINECRIFT FORGE **/
             this.readEntityFromNBT(tagCompund);
 
             if (this.shouldSetPosAfterLoading())
@@ -1697,7 +1852,16 @@
         {
             EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY + (double)offsetY, this.posZ, itemStackIn);
             var3.delayBeforeCanPickup = 10;
-            this.worldObj.spawnEntityInWorld(var3);
+			/** MINECRIFT FORGE **/
+			if (Reflector.forgeExists() && captureDrops)
+            {
+                capturedDrops.add(var3);
+            }
+            else
+            {
+            	this.worldObj.spawnEntityInWorld(var3);
+			}
+			/** END MINECRIFT FORGE **/
             return var3;
         }
         else
@@ -1725,7 +1889,9 @@
             float var3 = ((float)((var1 >> 1) % 2) - 0.5F) * 0.1F;
             float var4 = ((float)((var1 >> 2) % 2) - 0.5F) * this.width * 0.8F;
             int var5 = MathHelper.floor_double(this.posX + (double)var2);
-            int var6 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight() + (double)var3);
+            //VIVE Crawling experiemnt
+            int var6 = MathHelper.floor_double(this.boundingBox.minY + (double)this.height + (double)var3);
+            //END VIVE
             int var7 = MathHelper.floor_double(this.posZ + (double)var4);
 
             if (this.worldObj.getBlock(var5, var6, var7).isNormalCube())
@@ -2008,7 +2174,16 @@
      */
     public boolean isRiding()
     {
-        return this.ridingEntity != null;
+		/** MINECRIFT FORGE **/
+		if (Reflector.forgeExists())
+		{
+			return this.ridingEntity != null && ridingEntity.shouldRiderSit();
+		}
+		else
+		{
+        	return this.ridingEntity != null;
+		}
+		/** END MINECRIFT FORGE **/
     }
 
     /**
@@ -2131,6 +2306,7 @@
 
     protected boolean pushOutOfBlocks(double x, double y, double z)
     {
+    	
         int var7 = MathHelper.floor_double(x);
         int var8 = MathHelper.floor_double(y);
         int var9 = MathHelper.floor_double(z);
@@ -2375,7 +2551,17 @@
      */
     public float getExplosionResistance(Explosion explosionIn, World worldIn, int x, int y, int z, Block blockIn)
     {
-        return blockIn.getExplosionResistance(this);
+		/** MINECRIFT FORGE **/
+		if (Reflector.forgeExists())
+		{
+			//return blockIn.getExplosionResistance(this, worldIn, x, y, z, posX, posY + getEyeHeight(), posZ);
+            return Reflector.callFloat(blockIn, Reflector.ForgeBlock_getExplosionResistance, new Object[] {this, worldIn, x, y, z, posX, posY + getEyeHeight(), posZ});
+		}
+		else
+		{
+        	return blockIn.getExplosionResistance(this);
+		}
+		/** END MINECRIFT FORGE **/
     }
 
     public boolean func_145774_a(Explosion explosionIn, World worldIn, int x, int y, int z, Block blockIn, float unused)
@@ -2453,6 +2639,204 @@
 
     public void func_145781_i(int p_145781_1_) {}
 
+/** MINECRIFT FORGE **/
+    /* ================================== Forge Start =====================================*/
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+        if (customEntityData == null)
+        {
+            customEntityData = new NBTTagCompound();
+        }
+        return customEntityData;
+    }
+
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+
+    /**
+     * Called when a user uses the creative pick block button on this entity.
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, Null if nothing should be added.
+     */
+    public ItemStack getPickedResult(MovingObjectPosition target)
+    {
+        if (this instanceof EntityPainting)
+        {
+            return new ItemStack(Items.painting);
+        }
+        else if (this instanceof EntityLeashKnot)
+        {
+            return new ItemStack(Items.lead);
+        }
+        else if (this instanceof EntityItemFrame)
+        {
+            ItemStack held = ((EntityItemFrame)this).getDisplayedItem();
+            if (held == null)
+            {
+                return new ItemStack(Items.item_frame);
+            }
+            else
+            {
+                return held.copy();
+            }
+        }
+        else if (this instanceof EntityMinecart)
+        {
+            //return ((EntityMinecart)this).getCartItem();
+            return (ItemStack)Reflector.call(this, Reflector.ForgeEntityMinecart_getCartItem, new Object[] {});
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(Items.boat);
+        }
+        else
+        {
+            int id = EntityList.getEntityID(this);
+            if (id > 0 && EntityList.entityEggs.containsKey(id))
+            {
+                return new ItemStack(Items.spawn_egg, 1, id);
+            }
+        }
+        return null;
+    }
+
+    public UUID getPersistentID()
+    {
+        return entityUniqueID;
+    }
+
+    /**
+     * Reset the entity ID to a new value. Not to be used from Mod code
+     */
+    public final void resetEntityId()
+    {
+        this.entityId = nextEntityID++;
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+
+    /**
+     * Returns true if the entity is of the @link{EnumCreatureType} provided
+     * @param type The EnumCreatureType type this entity is evaluating
+     * @param forSpawnCount If this is being invoked to check spawn count caps.
+     * @return If the creature is of the type provided
+     */
+    public boolean isCreatureType(EnumCreatureType type, boolean forSpawnCount)
+    {
+        return type.getCreatureClass().isAssignableFrom(this.getClass());
+    }
+
+    /**
+     * Register the instance of IExtendedProperties into the entity's collection.
+     * @param identifier The identifier which you can use to retrieve these properties for the entity.
+     * @param properties The instanceof IExtendedProperties to register
+     * @return The identifier that was used to register the extended properties.  Empty String indicates an error.  If your requested key already existed, this will return a modified one that is unique.
+     */
+    /** MINECRIFT FORGE **
+     *
+     * NOTE: we define registerExtendedProperties here to take String, Object as params.
+     *  I don't know of a way to modify param types via reflection, but we need to take
+     *  String, net.minecraftforge.common.IExtendedEntityProperties objects as params here.
+     *  This is performed via ASM on class load in MinecriftClassTransformer$EntityTransform.
+     * ANY CHANGES TO THIS FUNCTION MUST ALSO BE MADE IN
+     * com.mtbs.minecrift.tweaker.MinecriftClassTransformer$EntityTransform via ASMifier!!
+     *
+     ** END MINECRIFT FORGE **/
+    public String registerExtendedProperties(String identifier, Object properties)
+    {
+        if (Reflector.forgeExists()) {
+            if (identifier == null) {
+                //FMLLog.warning("Someone is attempting to register extended properties using a null identifier.  This is not allowed.  Aborting.  This may have caused instability.");
+                Reflector.callVoid(Reflector.FMLLog_warning, new Object[] {"Someone is attempting to register extended properties using a null identifier.  This is not allowed.  Aborting.  This may have caused instability."});
+                return "";
+            }
+            if (properties == null) {
+                //FMLLog.warning("Someone is attempting to register null extended properties.  This is not allowed.  Aborting.  This may have caused instability.");
+                Reflector.callVoid(Reflector.FMLLog_warning, new Object[] {"Someone is attempting to register null extended properties.  This is not allowed.  Aborting.  This may have caused instability."});
+                return "";
+            }
+
+            String baseIdentifier = identifier;
+            int identifierModCount = 1;
+            while (this.extendedProperties.containsKey(identifier)) {
+                identifier = String.format("%s%d", baseIdentifier, identifierModCount++);
+            }
+
+            if (baseIdentifier != identifier) {
+                //FMLLog.info("An attempt was made to register exended properties using an existing key.  The duplicate identifier (%s) has been remapped to %s.", baseIdentifier, identifier);
+                Reflector.callVoid(Reflector.FMLLog_info, new Object[] {"An attempt was made to register exended properties using an existing key.  The duplicate identifier (%s) has been remapped to %s.", baseIdentifier, identifier});
+            }
+
+            this.extendedProperties.put(identifier, properties);
+            return identifier;
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the extended properties identified by the passed in key
+     * @param identifier The key that identifies the extended properties.
+     * @return The instance of IExtendedProperties that was found, or null.
+     */
+    /** MINECRIFT FORGE **
+     *
+     * NOTE: we define getExtendedProperties here to return an Object. I don't know
+     *  of a way to modify return values via reflection, but we need to return a
+     *  net.minecraftforge.common.IExtendedEntityProperties object here.
+     *  This is performed via ASM on class load within MinecriftClassTransformer$EntityTransform.
+     * ANY CHANGES TO THIS FUNCTION MUST ALSO BE MADE IN
+     * com.mtbs.minecrift.tweaker.MinecriftClassTransformer$EntityTransform via ASMifier!!
+     *
+    ** END MINECRIFT FORGE **/
+    public Object getExtendedProperties(String identifier)
+    {
+        if (Reflector.forgeExists())
+        {
+            return this.extendedProperties.get(identifier);
+        }
+
+        return null;
+    }
+
+    /**
+     * If a rider of this entity can interact with this entity. Should return true on the
+     * ridden entity if so.
+     *
+     * @return if the entity can be interacted with from a rider
+     */
+    public boolean canRiderInteract()
+    {
+        return false;
+    }
+
+    /**
+     * If the rider should be dismounted from the entity when the entity goes under water
+     *
+     * @param rider The entity that is riding
+     * @return if the entity should be dismounted when under water
+     */
+    public boolean shouldDismountInWater(Entity rider)
+    {
+        return this instanceof EntityLivingBase;
+    }
+    /* ================================== Forge End =====================================*/
+/** END MINECRIFT FORGE **/
     public static enum EnumEntitySize
     {
         SIZE_1("SIZE_1", 0),

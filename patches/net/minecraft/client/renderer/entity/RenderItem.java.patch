--- a/net/minecraft/client/renderer/entity/RenderItem.java
+++ b/net/minecraft/client/renderer/entity/RenderItem.java
@@ -438,28 +438,27 @@
         }
         else if (p_77015_3_.getItem().requiresMultipleRenderPasses())
         {
-            GL11.glDisable(GL11.GL_LIGHTING);
-            GL11.glEnable(GL11.GL_ALPHA_TEST);
-            p_77015_2_.bindTexture(TextureMap.locationItemsTexture);
-            GL11.glDisable(GL11.GL_ALPHA_TEST);
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(0, 0, 0, 0);
-            GL11.glColorMask(false, false, false, true);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            Tessellator var8 = Tessellator.instance;
-            var8.startDrawingQuads();
-            var8.setColorOpaque_I(-1);
-            var8.addVertex((double)(p_77015_4_ - 2), (double)(p_77015_5_ + 18), (double)this.zLevel);
-            var8.addVertex((double)(p_77015_4_ + 18), (double)(p_77015_5_ + 18), (double)this.zLevel);
-            var8.addVertex((double)(p_77015_4_ + 18), (double)(p_77015_5_ - 2), (double)this.zLevel);
-            var8.addVertex((double)(p_77015_4_ - 2), (double)(p_77015_5_ - 2), (double)this.zLevel);
-            var8.draw();
-            GL11.glColorMask(true, true, true, true);
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            GL11.glEnable(GL11.GL_ALPHA_TEST);
-            OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-
+          GL11.glDisable(GL11.GL_LIGHTING);
+//            GL11.glEnable(GL11.GL_ALPHA_TEST); jrbudda dont care how. it works.
+          	  p_77015_2_.bindTexture(TextureMap.locationItemsTexture);
+          	  GL11.glDisable(GL11.GL_BLEND);
+//            GL11.glDisable(GL11.GL_TEXTURE_2D);
+//            GL11.glEnable(GL11.GL_BLEND);
+//            GL11.glColorMask(false, false, false, true);
+//            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+//            Tessellator var8 = Tessellator.instance;
+//            var8.startDrawingQuads();
+//            var8.setColorOpaque_I(-1);
+//            var8.addVertex((double)(p_77015_4_ - 2), (double)(p_77015_5_ + 18), (double)this.zLevel);
+//            var8.addVertex((double)(p_77015_4_ + 18), (double)(p_77015_5_ + 18), (double)this.zLevel);
+//            var8.addVertex((double)(p_77015_4_ + 18), (double)(p_77015_5_ - 2), (double)this.zLevel);
+//            var8.addVertex((double)(p_77015_4_ - 2), (double)(p_77015_5_ - 2), (double)this.zLevel);
+//            var8.draw();
+           GL11.glColorMask(true, true, true, true);
+           GL11.glEnable(GL11.GL_TEXTURE_2D);
+           GL11.glEnable(GL11.GL_ALPHA_TEST);
+           OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+           
             for (var9 = 0; var9 <= 1; ++var9)
             {
                 IIcon var10 = p_77015_3_.getItem().getIconFromDamageForRenderPass(var6, var9);
@@ -475,7 +474,6 @@
 
                 this.renderIcon(p_77015_4_, p_77015_5_, var10, 16, 16);
             }
-
             GL11.glEnable(GL11.GL_LIGHTING);
         }
         else
@@ -566,13 +564,16 @@
                 GL11.glDepthFunc(GL11.GL_EQUAL);
                 GL11.glDisable(GL11.GL_LIGHTING);
                 GL11.glDepthMask(false);
+                GL11.glColorMask(true, true, true, false);
                 p_82406_2_.bindTexture(RES_ITEM_GLINT);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
-                GL11.glEnable(GL11.GL_BLEND);
                 GL11.glColor4f(0.5F, 0.25F, 0.8F, 1.0F);
+                GL11.glEnable(GL11.GL_BLEND);
+                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
                 this.renderGlint(p_82406_4_ * 431278612 + p_82406_5_ * 32178161, p_82406_4_ - 2, p_82406_5_ - 2, 20, 20);
                 OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+                GL11.glDisable(GL11.GL_BLEND);
                 GL11.glDepthMask(true);
+                GL11.glColorMask(true, true, true, true);
                 GL11.glEnable(GL11.GL_LIGHTING);
                 GL11.glDepthFunc(GL11.GL_LEQUAL);
             }
@@ -581,32 +582,34 @@
         }
     }
 
+
+
     private void renderGlint(int p_77018_1_, int p_77018_2_, int p_77018_3_, int p_77018_4_, int p_77018_5_)
     {
-        for (int var6 = 0; var6 < 2; ++var6)
+        for (int j1 = 0; j1 < 2; ++j1)
         {
             OpenGlHelper.glBlendFunc(772, 1, 0, 0);
-            float var7 = 0.00390625F;
-            float var8 = 0.00390625F;
-            float var9 = (float)(Minecraft.getSystemTime() % (long)(3000 + var6 * 1873)) / (3000.0F + (float)(var6 * 1873)) * 256.0F;
-            float var10 = 0.0F;
-            Tessellator var11 = Tessellator.instance;
-            float var12 = 4.0F;
+            float f = 0.00390625F;
+            float f1 = 0.00390625F;
+            float f2 = (float)(Minecraft.getSystemTime() % (long)(3000 + j1 * 1873)) / (3000.0F + (float)(j1 * 1873)) * 256.0F;
+            float f3 = 0.0F;
+            Tessellator tessellator = Tessellator.instance;
+            float f4 = 4.0F;
 
-            if (var6 == 1)
+            if (j1 == 1)
             {
-                var12 = -1.0F;
+                f4 = -1.0F;
             }
 
-            var11.startDrawingQuads();
-            var11.addVertexWithUV((double)(p_77018_2_ + 0), (double)(p_77018_3_ + p_77018_5_), (double)this.zLevel, (double)((var9 + (float)p_77018_5_ * var12) * var7), (double)((var10 + (float)p_77018_5_) * var8));
-            var11.addVertexWithUV((double)(p_77018_2_ + p_77018_4_), (double)(p_77018_3_ + p_77018_5_), (double)this.zLevel, (double)((var9 + (float)p_77018_4_ + (float)p_77018_5_ * var12) * var7), (double)((var10 + (float)p_77018_5_) * var8));
-            var11.addVertexWithUV((double)(p_77018_2_ + p_77018_4_), (double)(p_77018_3_ + 0), (double)this.zLevel, (double)((var9 + (float)p_77018_4_) * var7), (double)((var10 + 0.0F) * var8));
-            var11.addVertexWithUV((double)(p_77018_2_ + 0), (double)(p_77018_3_ + 0), (double)this.zLevel, (double)((var9 + 0.0F) * var7), (double)((var10 + 0.0F) * var8));
-            var11.draw();
+            tessellator.startDrawingQuads();
+            tessellator.addVertexWithUV((double)(p_77018_2_ + 0), (double)(p_77018_3_ + p_77018_5_), (double)this.zLevel, (double)((f2 + (float)p_77018_5_ * f4) * f), (double)((f3 + (float)p_77018_5_) * f1));
+            tessellator.addVertexWithUV((double)(p_77018_2_ + p_77018_4_), (double)(p_77018_3_ + p_77018_5_), (double)this.zLevel, (double)((f2 + (float)p_77018_4_ + (float)p_77018_5_ * f4) * f), (double)((f3 + (float)p_77018_5_) * f1));
+            tessellator.addVertexWithUV((double)(p_77018_2_ + p_77018_4_), (double)(p_77018_3_ + 0), (double)this.zLevel, (double)((f2 + (float)p_77018_4_) * f), (double)((f3 + 0.0F) * f1));
+            tessellator.addVertexWithUV((double)(p_77018_2_ + 0), (double)(p_77018_3_ + 0), (double)this.zLevel, (double)((f2 + 0.0F) * f), (double)((f3 + 0.0F) * f1));
+            tessellator.draw();
         }
     }
-
+    
     /**
      * Renders the item's overlay information. Examples being stack count or damage on top of the item's image at the
      * specified position.
@@ -673,6 +676,7 @@
 
     public void renderIcon(int p_94149_1_, int p_94149_2_, IIcon p_94149_3_, int p_94149_4_, int p_94149_5_)
     {
+    	if(p_94149_3_ == null) return; //wtf
         Tessellator var6 = Tessellator.instance;
         var6.startDrawingQuads();
         var6.addVertexWithUV((double)(p_94149_1_ + 0), (double)(p_94149_2_ + p_94149_5_), (double)this.zLevel, (double)p_94149_3_.getMinU(), (double)p_94149_3_.getMaxV());
@@ -700,4 +704,55 @@
     {
         this.doRender((EntityItem)p_76986_1_, p_76986_2_, p_76986_4_, p_76986_6_, p_76986_8_, p_76986_9_);
     }
+    
+    /*==================================== FORGE START ===========================================*/
+
+    /**
+     * Items should spread out when rendered in 3d?
+     * @return
+     */
+    public boolean shouldSpreadItems()
+    {
+        return true;
+    }
+
+    /**
+     * Items should have a bob effect
+     * @return
+     */
+    public boolean shouldBob()
+    {
+        return true;
+    }
+
+    public byte getMiniBlockCount(ItemStack stack, byte original)
+    {
+        return original;
+    }
+
+    /**
+     * Allows for a subclass to override how many rendered items appear in a
+     * "mini item 3d stack"
+     * @param stack The item stack
+     * @param original The default amount vanilla would use
+     * @return
+     */
+    public byte getMiniItemCount(ItemStack stack, byte original)
+    {
+        return original;
+    }
+
+    private static RenderItem instance;
+    /**
+     * Returns a single lazy loaded instance of RenderItem, for use in mods who
+     * don't care about the interaction of other objects on the current state of the RenderItem they are using.
+     * @return A global instance of RenderItem
+     */
+    public static RenderItem getInstance()
+    {
+        if (instance == null) instance = new RenderItem();
+        return instance;
+    }
+    /*==================================== FORGE END =============================================*/
+    
 }

--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -10,6 +10,8 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.Callable;
+
+import com.mtbs3d.minecrift.settings.VRSettings;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.material.Material;
@@ -48,6 +50,7 @@
 import net.minecraft.client.particle.EntitySuspendFX;
 import net.minecraft.client.renderer.culling.ICamera;
 import net.minecraft.client.renderer.entity.RenderManager;
+import net.minecraft.client.renderer.entity.RenderPlayer;
 import net.minecraft.client.renderer.texture.IIconRegister;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.texture.TextureMap;
@@ -109,7 +112,9 @@
     public final TextureManager renderEngine;
     public CompactArrayList worldRenderersToUpdate = new CompactArrayList(100, 0.8F);
     private WorldRenderer[] sortedWorldRenderers;
-    private WorldRenderer[] worldRenderers;
+    /** MINECRIFT SHADERS MOD */
+    public WorldRenderer[] worldRenderers;
+    /** END MINECRIFT SHADERS MOD */
     private int renderChunksWide;
     private int renderChunksTall;
     private int renderChunksDeep;
@@ -646,9 +651,18 @@
             }
 
             this.theWorld.theProfiler.endStartSection("entities");
+            /** MINECRIFT SHADERS MOD **/
+            boolean shadersMod = Reflector.shadersModExists();
+            if (shadersMod) {
+                //Shaders.beginEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginEntities, new Object[] {});
+            }
             boolean var26 = this.mc.gameSettings.fancyGraphics;
             this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
 
+            /** MINECRIFT */ // logic to determine whether to render head, headwear etc...
+            Entity thePlayer = null;
+            RenderPlayer renderPlayer = (RenderPlayer)RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
             for (var25 = 0; var25 < var24.size(); ++var25)
             {
                 var19 = (Entity)var24.get(var25);
@@ -668,24 +682,51 @@
                         }
                     }
 
-                    if (te && (var19 != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView != 0 || this.mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(var19.posX), 0, MathHelper.floor_double(var19.posZ)))
+                    if (te && (var19 == this.mc.renderViewEntity && this.mc.gameSettings.thirdPersonView == 0 && !mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(var19.posX), 0, MathHelper.floor_double(var19.posZ)))
                     {
-                        ++this.countEntitiesRendered;
+                        if (this.mc.vrSettings.renderFullFirstPersonModelMode == VRSettings.RENDER_FIRST_PERSON_HAND ||
+                            this.mc.vrSettings.renderFullFirstPersonModelMode == VRSettings.RENDER_FIRST_PERSON_NONE)
+                        {
+                            te = false;
+                        }
+                        else
+                        {
+                            thePlayer = var19;
+                        }
+                    }
 
+                    if (te)
+                    {
                         if (var19.getClass() == EntityItemFrame.class)
                         {
                             var19.renderDistanceWeight = 0.06D;
                         }
 
-                        this.renderedEntity = var19;
-                        RenderManager.instance.renderEntitySimple(var19, p_147589_3_);
-                        this.renderedEntity = null;
+                        if (thePlayer != var19)
+                        {
+                            ++this.countEntitiesRendered;
+                            this.renderedEntity = var19;
+                            if (shadersMod) {
+                                //Shaders.nextEntity();
+                                Reflector.callVoid(Reflector.ShadersMod_Shaders_nextEntity, new Object[] {});
+                            }
+                            RenderManager.instance.renderEntitySimple(var19, p_147589_3_);
+                            this.renderedEntity = null;
+                        }
                     }
                 }
             }
+			/** END MINECRIFT */
 
             this.mc.gameSettings.fancyGraphics = var26;
             this.theWorld.theProfiler.endStartSection("blockentities");
+            if (shadersMod) {
+                //Shaders.endEntities();
+                //Shaders.beginBlockEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endEntities, new Object[] {});
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginBlockEntities, new Object[] {});
+            }
+            /** END MINECRIFT SHADERS MOD **/
             RenderHelper.enableStandardItemLighting();
 
             for (var25 = 0; var25 < this.tileEntities.size(); ++var25)
@@ -731,9 +772,58 @@
                     }
                 }
             }
+            /** MINECRIFT SHADERS MOD **/
+            if (shadersMod) {
+                //Shaders.endBlockEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endBlockEntities, new Object[] {});
+            }
+
+            /** MINECRIFT */ // Render crosshair...
+            if (!Reflector.forgeExists())
+                this.mc.entityRenderer.disableLightmap((double)p_147589_3_);
+
+            this.mc.entityRenderer.renderCrosshairAtDepth();
+
+            if (!Reflector.forgeExists())
+                this.mc.entityRenderer.enableLightmap((double)p_147589_3_);
+
+            // VIVE - render left hand
+            mc.entityRenderer.renderLeftHand();
+
+            // ...and now render the player...
+            if (thePlayer != null)
+            {
+                if (shadersMod) {
+                    //Shaders.beginEntities();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_beginEntities, new Object[] {});
+                }
+                ++this.countEntitiesRendered;
+                renderPlayer.setVR(true,this.mc.vrSettings.renderHeadWear, this.mc.vrSettings.renderPlayerOffset);
+                this.renderedEntity = thePlayer;
+                if (shadersMod) {
+                    //Shaders.nextEntity();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_nextEntity, new Object[] {});
+                }
+                RenderManager.instance.renderEntitySimple(thePlayer, p_147589_3_);
+                this.renderedEntity = null;
+                renderPlayer.setVR(false,true,0.0F);
+                if (shadersMod) {
+                    //Shaders.endEntities();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_endEntities, new Object[] {});
+                }
+            }
+
+           
+    
+            
+            /** END MINECRIFT SHADERS MOD **/
+			/** END MINECRIFT */
 
             this.mc.entityRenderer.disableLightmap((double)p_147589_3_);
             this.theWorld.theProfiler.endSection();
+            
+          
+            
         }
     }
 
@@ -1075,11 +1165,21 @@
                 {
                     endIndex = this.countSortedWorldRenderers;
                 }
-
+                /** MINECRIFT SHADERS MOD **/
                 GL11.glDisable(GL11.GL_TEXTURE_2D);
+                boolean shadersMod = Reflector.shadersModExists();
+                if (shadersMod) {
+                    //Shaders.disableTexture2D();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[]{});
+                }
                 GL11.glDisable(GL11.GL_LIGHTING);
                 GL11.glDisable(GL11.GL_ALPHA_TEST);
                 GL11.glDisable(GL11.GL_FOG);
+                if (shadersMod) {
+                    //Shaders.disableFog();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+                }
+                /** END MINECRIFT SHADERS MOD **/
                 GL11.glColorMask(false, false, false, false);
                 GL11.glDepthMask(false);
                 profiler.startSection("check");
@@ -1177,12 +1277,21 @@
                 {
                     GL11.glColorMask(true, true, true, true);
                 }
-
+                /** MINECRIFT SHADERS MOD **/
                 GL11.glDepthMask(true);
                 GL11.glEnable(GL11.GL_TEXTURE_2D);
+                if (shadersMod) {
+                    //Shaders.enableTexture2D();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+                }
                 GL11.glEnable(GL11.GL_ALPHA_TEST);
                 GL11.glEnable(GL11.GL_FOG);
+                if (shadersMod) {
+                    //Shaders.enableFog();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
+                }
                 profiler.endStartSection("render");
+                /** END MINECRIFT SHADERS MOD **/
             }
         }
         else
@@ -1422,13 +1531,13 @@
 
             this.glListBuffer.flip();
             EntityLivingBase var18 = this.mc.renderViewEntity;
-            double var19 = var18.lastTickPosX + (var18.posX - var18.lastTickPosX) * partialTicks - (double)WorldRenderer.globalChunkOffsetX;
+            double partialX = var18.lastTickPosX + (var18.posX - var18.lastTickPosX) * partialTicks - (double)WorldRenderer.globalChunkOffsetX;
             double partialY = var18.lastTickPosY + (var18.posY - var18.lastTickPosY) * partialTicks;
             double partialZ = var18.lastTickPosZ + (var18.posZ - var18.lastTickPosZ) * partialTicks - (double)WorldRenderer.globalChunkOffsetZ;
             this.mc.entityRenderer.enableLightmap(partialTicks);
-            GL11.glTranslatef((float)(-var19), (float)(-partialY), (float)(-partialZ));
+            GL11.glTranslatef((float)(-partialX), (float)(-partialY), (float)(-partialZ));
             GL11.glCallLists(this.glListBuffer);
-            GL11.glTranslatef((float)var19, (float)partialY, (float)partialZ);
+            GL11.glTranslatef((float)partialX, (float)partialY, (float)partialZ);
             this.mc.entityRenderer.disableLightmap(partialTicks);
             return l;
         }
@@ -1475,6 +1584,9 @@
      */
     public void renderSky(float par1)
     {
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
+        /** END MINECRIFT SHADERS MOD **/
         if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
         {
             WorldProvider var2 = this.mc.theWorld.provider;
@@ -1495,6 +1607,11 @@
             }
 
             GL11.glDisable(GL11.GL_FOG);
+            /** MINECRIFT SHADERS MOD **/
+            if (shadersMod) {
+                //Shaders.disableFog();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+            }
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glEnable(GL11.GL_BLEND);
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
@@ -1544,13 +1661,27 @@
 
             GL11.glDepthMask(true);
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.enableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+            }
             GL11.glEnable(GL11.GL_ALPHA_TEST);
+            /** END MINECRIFT SHADERS MOD **/
         }
         else if (this.mc.theWorld.provider.isSurfaceWorld())
         {
+            /** MINECRIFT SHADERS MOD **/
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.disableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+            }
             Vec3 var21 = this.theWorld.getSkyColor(this.mc.renderViewEntity, par1);
             var21 = CustomColorizer.getSkyColor(var21, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
+            if (shadersMod) {
+                //Shaders.setSkyColor(var21);
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_setSkyColor, new Object[] {var21});
+            }
             float var231 = (float)var21.xCoord;
             float var4 = (float)var21.yCoord;
             float var5 = (float)var21.zCoord;
@@ -1570,14 +1701,26 @@
             Tessellator var241 = Tessellator.instance;
             GL11.glDepthMask(false);
             GL11.glEnable(GL11.GL_FOG);
+            if (shadersMod) {
+                //Shaders.enableFog();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
+            }
             GL11.glColor3f(var231, var4, var5);
 
             if (Config.isSkyEnabled())
             {
+                if (shadersMod) {
+                    //Shaders.preSkyList();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_preSkyList, new Object[] {});
+                }
                 GL11.glCallList(this.glSkyList);
             }
 
             GL11.glDisable(GL11.GL_FOG);
+            if (shadersMod) {
+                //Shaders.disableFog();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+            }
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glEnable(GL11.GL_BLEND);
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
@@ -1595,6 +1738,10 @@
             if (var251 != null && Config.isSunMoonEnabled())
             {
                 GL11.glDisable(GL11.GL_TEXTURE_2D);
+                if (shadersMod) {
+                    //Shaders.disableTexture2D();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+                }
                 GL11.glShadeModel(GL11.GL_SMOOTH);
                 GL11.glPushMatrix();
                 GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
@@ -1634,6 +1781,10 @@
             }
 
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.enableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+            }
             OpenGlHelper.glBlendFunc(770, 1, 1, 0);
             GL11.glPushMatrix();
             var8 = 1.0F - this.theWorld.getRainStrength(par1);
@@ -1643,8 +1794,16 @@
             GL11.glColor4f(1.0F, 1.0F, 1.0F, var8);
             GL11.glTranslatef(var9, var10, var11);
             GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+            if (shadersMod) {
+                //Shaders.preCelestialRotate();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_preCelestialRotate, new Object[] {});
+            }
             CustomSky.renderSky(this.theWorld, this.renderEngine, this.theWorld.getCelestialAngle(par1), var8);
             GL11.glRotatef(this.theWorld.getCelestialAngle(par1) * 360.0F, 1.0F, 0.0F, 0.0F);
+            if (shadersMod) {
+                //Shaders.postCelestialRotate();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_postCelestialRotate, new Object[] {});
+            }
 
             if (Config.isSunMoonEnabled())
             {
@@ -1674,6 +1833,10 @@
             }
 
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.disableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+            }
             var20 = this.theWorld.getStarBrightness(par1) * var8;
 
             if (var20 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
@@ -1686,8 +1849,16 @@
             GL11.glDisable(GL11.GL_BLEND);
             GL11.glEnable(GL11.GL_ALPHA_TEST);
             GL11.glEnable(GL11.GL_FOG);
+            if (shadersMod) {
+                //Shaders.enableFog();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
+            }
             GL11.glPopMatrix();
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.disableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+            }
             GL11.glColor3f(0.0F, 0.0F, 0.0F);
             double var28 = this.mc.thePlayer.getPosition(par1).yCoord - this.theWorld.getHorizon();
 
@@ -1749,7 +1920,12 @@
 
             GL11.glPopMatrix();
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.enableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+            }
             GL11.glDepthMask(true);
+            /** END MINECRIFT SHADERS MOD **/
         }
     }
 
@@ -2202,6 +2378,8 @@
 
     public void drawBlockDamageTexture(Tessellator par1Tessellator, EntityLivingBase par2EntityPlayer, float par3)
     {
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
         double var4 = par2EntityPlayer.lastTickPosX + (par2EntityPlayer.posX - par2EntityPlayer.lastTickPosX) * (double)par3;
         double var6 = par2EntityPlayer.lastTickPosY + (par2EntityPlayer.posY - par2EntityPlayer.lastTickPosY) * (double)par3;
         double var8 = par2EntityPlayer.lastTickPosZ + (par2EntityPlayer.posZ - par2EntityPlayer.lastTickPosZ) * (double)par3;
@@ -2216,6 +2394,10 @@
             GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
             GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
             GL11.glEnable(GL11.GL_ALPHA_TEST);
+            if (shadersMod) {
+                //Shaders.beginBlockDestroyProgress();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginBlockDestroyProgress, new Object[]{});
+            }
             par1Tessellator.startDrawingQuads();
             par1Tessellator.setTranslation(-var4, -var6, -var8);
             par1Tessellator.disableColor();
@@ -2245,6 +2427,10 @@
 
             par1Tessellator.draw();
             par1Tessellator.setTranslation(0.0D, 0.0D, 0.0D);
+            if (shadersMod) {
+                //Shaders.endBlockDestroyProgress();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endBlockDestroyProgress, new Object[]{});
+            }
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glPolygonOffset(0.0F, 0.0F);
             GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
@@ -2252,6 +2438,7 @@
             GL11.glDepthMask(true);
             GL11.glPopMatrix();
         }
+        /** END MINECRIFT SHADERS MOD **/
     }
 
     /**
@@ -2259,6 +2446,8 @@
      */
     public void drawSelectionBox(EntityPlayer par1EntityPlayer, MovingObjectPosition par2MovingObjectPosition, int par3, float par4)
     {
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
         if (par3 == 0 && par2MovingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
         {
             GL11.glEnable(GL11.GL_BLEND);
@@ -2266,6 +2455,10 @@
             GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
             GL11.glLineWidth(2.0F);
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.disableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[]{});
+            }
             GL11.glDepthMask(false);
             float var5 = 0.002F;
             Block var6 = this.theWorld.getBlock(par2MovingObjectPosition.blockX, par2MovingObjectPosition.blockY, par2MovingObjectPosition.blockZ);
@@ -2281,8 +2474,13 @@
 
             GL11.glDepthMask(true);
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.enableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[]{});
+            }
             GL11.glDisable(GL11.GL_BLEND);
         }
+        /** END MINECRIFT SHADERS MOD **/
     }
 
     /**

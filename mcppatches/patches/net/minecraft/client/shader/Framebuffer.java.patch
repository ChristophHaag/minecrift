--- a/net/minecraft/client/shader/Framebuffer.java
+++ b/net/minecraft/client/shader/Framebuffer.java
@@ -1,10 +1,22 @@
 package net.minecraft.client.shader;
 
 import java.nio.ByteBuffer;
+
+import com.mtbs3d.minecrift.render.FBOParams;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.texture.TextureUtil;
+import net.minecraft.src.Reflector;
+
+import org.lwjgl.opengl.ARBFramebufferObject;
+import org.lwjgl.opengl.ContextCapabilities;
+import org.lwjgl.opengl.EXTFramebufferObject;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL32;
+import org.lwjgl.opengl.GLContext;
+
+import com.mtbs3d.minecrift.utils.TextureSelector;
 
 public class Framebuffer
 {
@@ -20,22 +32,63 @@
     public int framebufferFilter;
     private static final String __OBFID = "CL_00000959";
 
+    /** MINECRIFT */
+    public String _name;
+    public boolean genMipMaps = false;
+    public boolean multiSample = false;
+    public int multiSampleCount = 0;
+    public int textureType = GL11.GL_TEXTURE_2D;
+    public static final int NO_TEXTURE_ID = -1;
+    public boolean generatedFramebufferTexture = true;
+    public TextureSelector textureSelector=null;
+	/** END MINECRIFT */
+
     public Framebuffer(int p_i45078_1_, int p_i45078_2_, boolean p_i45078_3_)
     {
+	/** MINECRIFT */
+        this("Unknown", p_i45078_1_, p_i45078_2_, p_i45078_3_, false, false, 0, null);
+    }
+
+    public Framebuffer(String name, int p_i45078_1_, int p_i45078_2_, boolean p_i45078_3_, boolean generateMipMaps)
+    {
+        this(name, p_i45078_1_, p_i45078_2_, p_i45078_3_, generateMipMaps, false, 0, null);
+    }
+
+    public Framebuffer(String name, int p_i45078_1_, int p_i45078_2_, boolean p_i45078_3_, boolean generateMipMaps, boolean multisample, int multisamplecount, TextureSelector textureSelector)
+    {
+        this._name = name;
         this.useDepth = p_i45078_3_;
         this.framebufferObject = -1;
-        this.framebufferTexture = -1;
+        this.framebufferTexture = NO_TEXTURE_ID;
+        this.textureSelector=textureSelector;
+        if (this.textureSelector != null)
+            this.framebufferTexture = this.textureSelector.getFirstTexId();
+        this.generatedFramebufferTexture = true;
         this.depthBuffer = -1;
         this.framebufferColor = new float[4];
         this.framebufferColor[0] = 1.0F;
         this.framebufferColor[1] = 1.0F;
         this.framebufferColor[2] = 1.0F;
         this.framebufferColor[3] = 0.0F;
-        this.createBindFramebuffer(p_i45078_1_, p_i45078_2_);
+
+        this.genMipMaps = generateMipMaps;
+        this.multiSample = multisample;
+        if (this.multiSample) {
+            this.multiSampleCount = multisamplecount;
+            this.textureType = GL32.GL_TEXTURE_2D_MULTISAMPLE;
+        }
+
+        this.createBindFramebuffer(p_i45078_1_, p_i45078_2_, this.framebufferTexture);
     }
 
     public void createBindFramebuffer(int p_147613_1_, int p_147613_2_)
     {
+        createBindFramebuffer(p_147613_1_, p_147613_2_, NO_TEXTURE_ID);
+    }
+
+    public void createBindFramebuffer(int p_147613_1_, int p_147613_2_, int textureId)
+    {
+/** END MINECRIFT */
         if (!OpenGlHelper.isFramebufferEnabled())
         {
             this.framebufferWidth = p_147613_1_;
@@ -50,8 +103,10 @@
                 this.deleteFramebuffer();
             }
 
-            this.createFramebuffer(p_147613_1_, p_147613_2_);
-            this.checkFramebufferComplete();
+            this.createFramebuffer(p_147613_1_, p_147613_2_, textureId);
+			/** MINECRIFT *
+			this.checkFramebufferComplete();
+			** END MINECRIFT */
             OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, 0);
         }
     }
@@ -68,8 +123,9 @@
                 OpenGlHelper.func_153184_g(this.depthBuffer);
                 this.depthBuffer = -1;
             }
-
-            if (this.framebufferTexture > -1)
+            /* MINECRIFT */
+            if (this.framebufferTexture > NO_TEXTURE_ID && this.generatedFramebufferTexture == true)
+            /* END MINECRIFT */
             {
                 TextureUtil.deleteTexture(this.framebufferTexture);
                 this.framebufferTexture = -1;
@@ -86,6 +142,13 @@
 
     public void createFramebuffer(int p_147605_1_, int p_147605_2_)
     {
+/** MINECRIFT */
+        createFramebuffer(p_147605_1_, p_147605_2_, NO_TEXTURE_ID);
+    }
+
+    public void createFramebuffer(int p_147605_1_, int p_147605_2_, int textureId)
+    {
+/** END MINECRIFT */
         this.framebufferWidth = p_147605_1_;
         this.framebufferHeight = p_147605_2_;
         this.framebufferTextureWidth = p_147605_1_;
@@ -97,43 +160,93 @@
         }
         else
         {
-            this.framebufferObject = OpenGlHelper.func_153165_e();
-            this.framebufferTexture = TextureUtil.glGenTextures();
+			/** MINECRIFT */
+            this.framebufferObject = OpenGlHelper.func_153165_e();      // GL30.glGenFramebuffers()
+            if (textureId == NO_TEXTURE_ID) {
+                // generate texture
+                this.framebufferTexture = TextureUtil.glGenTextures();
+                this.generatedFramebufferTexture = true;
+            }
+            else {
+                // Use supplied texture ID
+                this.framebufferTexture = textureId;
+                this.generatedFramebufferTexture = false;
+            }
 
             if (this.useDepth)
             {
-                this.depthBuffer = OpenGlHelper.func_153185_f();
+                this.depthBuffer = OpenGlHelper.func_153185_f();        // GL30.glGenRenderbuffers()
             }
 
-            this.setFramebufferFilter(9728);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)null);
-            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, this.framebufferObject);
-            OpenGlHelper.func_153188_a(OpenGlHelper.field_153198_e, OpenGlHelper.field_153200_g, 3553, this.framebufferTexture, 0);
+            this.setFramebufferFilter(9728);        // GL11.GL_NEAREST
+            GL11.glBindTexture(this.textureType, this.framebufferTexture);
+            if (textureId == NO_TEXTURE_ID)
+            {
+                if (!this.multiSample) {
+                    GL11.glTexImage2D(this.textureType, 0, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer) null);
+                }
+                else {
+                    // TODO: Check GLContext capabilities
+                    GL32.glTexImage2DMultisample(this.textureType, this.multiSampleCount, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, false);
+                }
+            }
+
+            if (this.genMipMaps) {
+                // Allocate mip map storage
+                genMipMaps();                // TODO: Check GLContext capabilities
+            }
+
+            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, this.framebufferObject);   // GL30.glBindFramebuffer
+            OpenGlHelper.func_153188_a(OpenGlHelper.field_153198_e, OpenGlHelper.field_153200_g, this.textureType, this.framebufferTexture, 0);    // GL30.glFramebufferTexture2D
 
             if (this.useDepth)
             {
-                OpenGlHelper.func_153176_h(OpenGlHelper.field_153199_f, this.depthBuffer);
-                OpenGlHelper.func_153186_a(OpenGlHelper.field_153199_f, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight);
+                OpenGlHelper.func_153176_h(OpenGlHelper.field_153199_f, this.depthBuffer);   // GL30.glBindRenderbuffer
+                /** MINECRIFT FORGE **/
+				if (!Reflector.MinecraftForgeClient_getStencilBits.exists() || Reflector.callInt(Reflector.MinecraftForgeClient_getStencilBits, new Object[0]) == 0)
+                {
+                func_153186_a(OpenGlHelper.field_153199_f, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight); // GL30.glRenderbufferStorage
                 OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, OpenGlHelper.field_153201_h, OpenGlHelper.field_153199_f, this.depthBuffer);
+                }
+                else
+                {
+                    func_153186_a(OpenGlHelper.field_153199_f, org.lwjgl.opengl.EXTPackedDepthStencil.GL_DEPTH24_STENCIL8_EXT, this.framebufferTextureWidth, this.framebufferTextureHeight); // GL30.glRenderbufferStorage
+                    OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, org.lwjgl.opengl.EXTFramebufferObject.GL_DEPTH_ATTACHMENT_EXT, OpenGlHelper.field_153199_f, this.depthBuffer); // GL30.glFramebufferRenderbuffer
+                    OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, org.lwjgl.opengl.EXTFramebufferObject.GL_STENCIL_ATTACHMENT_EXT, OpenGlHelper.field_153199_f, this.depthBuffer);  // GL30.glFramebufferRenderbuffer
+                }
+				/** END MINECRIFT FORGE **/
             }
 
+            FBOParams.checkFramebufferStatus(OpenGlHelper.field_153198_e, this.framebufferObject);
             this.framebufferClear();
             this.unbindFramebufferTexture();
+			/** END MINECRIFT */
         }
+		
+    }
+
+	/** MINECRIFT */
+    public void genMipMaps()
+    {
+        GL30.glGenerateMipmap(this.textureType);    // TODO: Minecrift - Check GLContext capabilities
     }
+	/** END MINECRIFT */
 
     public void setFramebufferFilter(int p_147607_1_)
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
+			/** MINECRIFT */
             this.framebufferFilter = p_147607_1_;
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, (float)p_147607_1_);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, (float)p_147607_1_);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 10496.0F);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 10496.0F);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+            GL11.glBindTexture(this.textureType, this.framebufferTexture);
+            if (!this.multiSample) {
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_MIN_FILTER, (float) p_147607_1_);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_MAG_FILTER, (float) p_147607_1_);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_WRAP_S, 10496.0F);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_WRAP_T, 10496.0F);
+            }
+            GL11.glBindTexture(this.textureType, 0);
+			/** END MINECRIFT */
         }
     }
 
@@ -159,6 +272,12 @@
             {
                 throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
             }
+			/** MINECRIFT */
+            else if (var1 == GL30.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) // TODO: Minecrift - need to handle older OpenGL versions etc
+            {
+                throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
+            }
+			/** END MINECRIFT */
             else
             {
                 throw new RuntimeException("glCheckFramebufferStatus returned unknown status:" + var1);
@@ -168,18 +287,22 @@
 
     public void bindFramebufferTexture()
     {
+        /** MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
+            GL11.glBindTexture(this.textureType, this.framebufferTexture);
         }
+		/** END MINECRIFT */
     }
 
     public void unbindFramebufferTexture()
     {
+		/** MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+            GL11.glBindTexture(this.textureType, 0);
         }
+		/** END MINECRIFT */
     }
 
     public void bindFramebuffer(boolean p_147610_1_)
@@ -213,6 +336,13 @@
 
     public void framebufferRender(int p_147615_1_, int p_147615_2_)
     {
+	/** MINECRIFT */
+        framebufferRender(0, p_147615_1_, p_147615_2_, 0);
+    }
+
+    public void framebufferRender(int left, int p_147615_1_, int p_147615_2_, int top)
+    {
+	/** END MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
             GL11.glColorMask(true, true, true, false);
@@ -224,8 +354,10 @@
             GL11.glMatrixMode(GL11.GL_MODELVIEW);
             GL11.glLoadIdentity();
             GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-            GL11.glViewport(0, 0, p_147615_1_, p_147615_2_);
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
+			/** MINECRIFT */
+            GL11.glViewport(left, top, p_147615_1_, p_147615_2_);
+            GL11.glEnable(this.textureType);
+			/** END MINECRIFT */
             GL11.glDisable(GL11.GL_LIGHTING);
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glDisable(GL11.GL_BLEND);
@@ -265,4 +397,80 @@
         GL11.glClear(var1);
         this.unbindFramebuffer();
     }
+
+	/** MINECRIFT ADDITIONS BELOW */
+	
+    public void func_153186_a(int p_153186_0_, int p_153186_1_, int p_153186_2_, int p_153186_3_)
+    {
+        if (OpenGlHelper.framebufferSupported)
+        {
+            ContextCapabilities contextcapabilities = GLContext.getCapabilities();
+            int callType = 0;
+            if (contextcapabilities.OpenGL30)
+            {
+                callType = 0;
+            }
+            else if (contextcapabilities.GL_ARB_framebuffer_object)
+            {
+                callType = 1;
+            }
+            else if (contextcapabilities.GL_EXT_framebuffer_object)
+            {
+                callType = 2;
+            }
+
+            switch (callType)
+            {
+                case 0:
+                    if (!this.multiSample) {
+                        GL30.glRenderbufferStorage(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
+                    }
+                    else {
+                        GL30.glRenderbufferStorageMultisample(p_153186_0_, this.multiSampleCount, p_153186_1_, p_153186_2_, p_153186_3_);
+                    }
+                    break;
+                case 1:
+                    ARBFramebufferObject.glRenderbufferStorage(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
+                    break;
+                case 2:
+                    EXTFramebufferObject.glRenderbufferStorageEXT(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
+            }
+        }
+    }
+
+	public void selectTexture()
+    {
+    	if(textureSelector!=null)
+        {
+    		this.framebufferTexture = textureSelector.getCurrentTexId();
+            OpenGlHelper.func_153188_a(OpenGlHelper.field_153198_e, OpenGlHelper.field_153200_g, this.textureType, this.framebufferTexture, 0);    // GL30.glFramebufferTexture2D
+    	}
+	}
+
+    public int getFramebufferType()
+    {
+        return OpenGlHelper.field_153198_e; // GL_FRAMEBUFFER (draw framebuffer)
+    }
+
+    public int getFramebufferId()
+    {
+        return this.framebufferObject;
+    }
+
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("MC FBO: " + _name).append("\n");
+        sb.append("Size:   " + framebufferWidth + " x " + framebufferHeight).append("\n");
+        sb.append("Type:   " + (OpenGlHelper.field_153198_e == ARBFramebufferObject.GL_READ_FRAMEBUFFER ? "GL_READ_FRAMEBUFFER" : "GL_DRAW_FRAMEBUFFER")).append("\n");
+        sb.append("FB ID:  " + framebufferObject).append("\n");
+        sb.append("Tex ID: " + framebufferTexture).append("\n");
+        if (textureSelector != null)
+            sb.append("TextureSelector:\n" + textureSelector.toString());
+        else
+            sb.append("TextureSelector: null");
+
+
+        return sb.toString();
+    }
 }
